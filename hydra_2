// MICROPHONE AUDIO INPUT AS VALUE
// FFT functionality is available via an audio object accessed via "a". The editor uses https://github.com/meyda/meyda for audio analysis. 

// To show the fft bins:

// a.show()

// Set number of fft bins:

// a.setBins(6)

// Access the value of the leftmost (lowest frequency) bin:

// a.fft[0]

// Use the value to control a variable:

// osc(10, 0, () => (a.fft[0]*4)).out()


// FUNCTIONS AS VALUES (5 min)(25)

solid((({time})=>Math.sin(time)*[0.45]+ 0.8),0.3,0.7).out(o0)
solid(0.2,0.8,0.4).out(o1)
solid(0.3,0.1,0.2).out(o2)
solid(0.7,0.1,0.5).out(o3)


solid((({time})=>Math.sin(time)*[0.5]+ 0.25),0,0).out(o1)
solid(0,(({time})=>Math.sin(time)*[0.5]+ 0.5),0).out(o2)
solid(0,0,(({time})=>Math.sin(time)*[0.5]+ 0.75)).out(o3)




osc( [1,10,50,100,250,500].fast(2) ).out(o0) // frequency
osc( ({time}) => Math.sin(time/10) * 100 ).out(o1) // frequency 2
osc( 10, [-10,-1,-0.1,0,0.1,1,10], 0 ).out(o2) // sync
osc(10,0.1, ({time}) => Math.sin(time/10) * 100 ).out(o3) // offset
render()


// SHIFT (10 min)(35)
// .shift( r, g, b, a )


render(o3)

solid(0,0,0)
// solid(1,1,1)
// solid(1,0,0)
// solid(0.2,0.8,0.4)
// solid(0.7,0.1,0.4)
.shift(0.5,0.1,0.3,[0.5].fast(2))//SHIFT
.shift(0,0,0.9,[0.8, 0.02])//SHIFT
.shift(0.15,0.6,0.2,[0.2, 0.6])//RE-SHIFT
.out(o3)


solid(0,0,(({time})=>Math.sin(time)*[0.2]+0.6))
// solid(0.2,0.8,0.4)
.shift(0.5,0.2, 0, [0,0.8, 0.3, 0.6])// .shift( r, g, b, a )
.out(o3)


// NEXT OSC
// osc( frequency, sync, offset )
// .shift( r, g, b, a )

osc(1)
// osc(0.61,0.25,0.9)//
.shift(0.5,0.2, 0.5, [0.8, 0.2])
.out(o3)

// >> PRACTICE with this 10 mins (45)






//
// noise([(({time})=>Math.sin(time))]).out()
//
// (({time})=>Math.sin(time))

// SOURCES

// solid().out(o0)
//
// src(o1).out(o0)
//

// osc(10).color(([1,0,0,1,0],[0,1,0,1,0],[0,0,1,1,0]).fast(6)).out(o0)
//
// osc(10).color([0.4,0.5,0.7]).out(o0)
//
// osc(10).color(([1,0,0],[0,1,0],[0,0,1]).fast(0.5)).out(o0)


//
// // COMPLEX EXAMPLE
// osc(10).color(([1],[0],[0]).fast(2)).out(o0)
// osc( [1,10,50,100,250,500].fast(2) )
// // .kaleid(20)
// .out(o0) // frequency
// osc( ({time}) => Math.sin(time/10) * 100 ).kaleid(19).out(o1) // frequency 2
// osc( 10, [-10,-1,-0.1,0,0.1,1,10], 0 ).kaleid(21).out(o2) // sync
// osc(10,0.1, ({time}) => Math.sin(time/10) * 1 ) // offset
//   .modulate(o1,0.05)
//   .modulate(o2,0.05)
//   .modulate(o3,0.05)
//   // .kaleid(2)
//   .add(noise(3,10))
//   .out(o3)
// render(o3)


// OPERATORS PT 1 (15m)(90)
// MASK

//.mask( texture, reps, offset )
  //(color/ src/ shape) + reps(default 3.0) + offset (default 0.5)
// +++
// shape( sides, radius, smoothing)

osc(40).mask(shape(4),0.4,0.2).out(o0) // SHAPE IS SOLLID MASK

osc(80).mask(shape(4,0.4,0.6),9,0.4).out(o0) //SHAPE + MASK PARAMETERS

osc(80).mask(shape(4,0.4,[0.2,0.4,0.6,0.8,0.6,0.4])).out(o0) // ONLY SHAPE PARAMETER


// NOISE

osc(60).mask(noise(1),4,0.2).out(o0) //noise( scale, offset)

osc(40).mask(noise(2,0.5),4,0.2).out(o0)


//low contrast
osc(1.08).mask(noise(2),4,0.6).out(o0)
//contrast
osc(8.08).mask(noise(2),4,0.6).contrast(1.4).out(o0)
// contrast
osc(18.08).mask(noise(2),40,2.6).contrast(2).out(o0)

osc(18.08).mask(noise(2),40,2.6).contrast(-2).out(o0)// negative contrast
osc(18.08).mask(noise(20),1,3.6).contrast(-0.25).out(o0)// negative contrast
// slow
osc(1.08).mask(noise(2),4,0.6).out(o0)


// MORE COMPLEX EXAMPLES
osc(18.08).mask(noise(20),1,3.6).contrast(-0.25)
.diff(osc(4).rotate((0.23)).color(1,[0,1,1],[0,1,0,0].fast(8)))
.out(o0)


// VORONOI
// voronoi( scale, speed, blending )
// (default 5)+(default 0.3)+(default 0.3)

voronoi(0.45,[2.5,0.5,0.25],1).out(o0) // CHANGING SPEED

voronoi(0.95,1.2,[1,0.5,0.1,0.5]).out(o0)

voronoi(2.5)
.diff(voronoi([130,300,100]),0.05)
// .mult(voronoi(24),0.04).contrast(24)
// .thresh([0.7,0.6,0.4,0.6,0.75])
  // .diff(voronoi([130,300,100]),0.05)
  .thresh(({time}) => Math.sin(time/120) * 0.05 )
.out()

// COMPLEX EXAMPLE
// RIVER ROCKS
voronoi(200)
.color(0,0,1)
.mult(osc(1,0.02))
.rotate()
.modulate(osc(1.5),0.8)
.add(voronoi(190))
.add(o0)
.mult(solid(0,0,1),0.07)
.add(noise(0.3,0.07))
.diff(noise(0.3,0.07))
// .thresh(0.4)
.out(o0)

// >> PRACTICE with this 15 mins (95)

// >> QUESTIONS 10 min (105)
